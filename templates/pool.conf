{% set start_servers = item.pm_max_servers | default(3) | int %}
{% set max_children = item.pm_max_servers | default(ansible_memtotal_mb/100) | int %}
{% set min_spare_servers = item.pm_min_spare_servers | default(1) | int %}
{% set max_spare_servers = item.pm_max_spare_servers | default(3) | int %}
{% if start_servers <= min_spare_servers %}
{% set start_servers = min_spare_servers + 1 %}
{% endif %}
{% if start_servers > max_spare_servers %}
{% set start_servers = max_spare_servers - 1 %}
{% endif %}
;;;;;;;;;;;;;;;;;;;;
; Pool Definitions ;
;;;;;;;;;;;;;;;;;;;;

[{{ item.name | default(item.user if item.user is defined else 'www-data') }}]
user = {{ item.user | default('www-data') }}
group = {{ item.group | default('www-data') }}

listen = {{ item.socket_file | default('/run/php' + php7_fpm_version + '-fpm-' + item.name + '.socket') }}

; ops I said the opposite of what I meant. We are NOT adding the user (pool1) to the webserver group (www-data) we’re doing the opposite here – adding www-data to the secondary group pool1 or pool2.
; So the webserver user has access to all the sockets but the pool users cannot access each other’s socket. Am I correct here?
listen.owner = {{ nginx_user | default('www-data') }}
listen.group = {{ nginx_group | default('www-data') }}
listen.mode = 0660

prefix = {{ item.prefix }}
;chroot = $prefix
;chdir = /html
chdir = {{ item.chdir | default('/') }}

{% if item.pm is defined and item.pm == 'ondemand' %}
pm = ondemand
pm.max_children = {{ item.pm_max_children | default(max_children) }}
pm.process_idle_timeout = {{ item.pm_process_idle_timeout | default('360s') }}
pm.max_requests = {{ item.pm_max_requests | default(200) }}
{% endif %}

{% if item.pm is not defined or item.pm == 'dynamic' %}
pm = dynamic
pm.start_servers = {{ item.pm_start_servers | default(start_servers) }}
pm.max_children = {{ item.pm_max_children | default(max_children) }}
pm.min_spare_servers = {{ item.pm_min_spare_servers | default(min_spare_servers) }}
pm.max_spare_servers = {{ item.pm_max_spare_servers | default(max_spare_servers) }}
pm.max_requests = {{ item.pm_max_requests | default(500) }}
pm.process_idle_timeout = {{ item.pm_process_idle_timeout | default('10s') }};
{% endif %}

{% if item.pm is defined and item.pm == 'static' %}
pm = static
pm.start_servers = {{ item.pm_start_servers | default(max_children) }}
pm.max_requests = {{ item.pm_max_requests | default(500) }}
{% endif %}

{% if item.access_logfile is defined %}
access.log = {{ item.access_logfile }}
{% endif %}
request_terminate_timeout = 60m
{% if item.request_slowlog_timeout is defined %}
request_slowlog_timeout = {{ item.request_slowlog_timeout }}
slowlog = {{ item.slowlog | default('/var/log/php7-fpm-slowlog.log') }}
{% endif %}
catch_workers_output = yes

; Environment variables
env[HOSTNAME] = $HOSTNAME
env[PATH] = /usr/local/bin:/usr/bin:/bin
{% if item.tmp_path is defined %}
env[TMP] = {{ item.tmp_path }}
env[TMPDIR] = {{ item.tmp_path }}
env[TEMP] = {{ item.tmp_path }}
{% endif %}

; php_admin_value
{% if item.sessions_path is defined %}
php_admin_value[session.save_path] = "{{ item.sessions_path }}"
{% endif %}
{% if item.php_admin_value is defined %}
{% for key, value in item.php_admin_value.items() %}
php_admin_value[{{ key }}] = {{ value }}
{% endfor %}
{% endif %}

; php_admin_flag
{% if item.php_admin_flag is defined %}
{% for key, value in item.php_admin_flag.items() %}
php_admin_flag[{{ key }}] = {{ value }}
{% endfor %}
{% endif %}