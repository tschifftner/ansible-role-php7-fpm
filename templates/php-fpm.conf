; {{ ansible_managed }}
;
;;;;;;;;;;;;;;;;;;;;;
; FPM Configuration ;
;;;;;;;;;;;;;;;;;;;;;

; All relative paths in this configuration file are relative to PHP's install
; prefix (/usr). This prefix can be dynamically changed by using the
; '-p' argument from the command line.

; Include one or more files. If glob(3) exists, it is used to include a bunch of
; files from a glob(3) pattern. This directive can be used everywhere in the
; file.
; Relative path can also be used. They will be prefixed by:
;  - the global prefix if it's been set (-p argument)
;  - /usr otherwise
;include=/etc/php/{{ php7_fpm_version }}/fpm/*.conf

;;;;;;;;;;;;;;;;;;
; Global Options ;
;;;;;;;;;;;;;;;;;;

[global]
; Pid file
; Note: the default prefix is /var
; Default Value: none
; pid = /run/php7-fpm.pid
{% if php7_fpm_pid is defined and php7_fpm_pid != '' %}
pid = {{ php7_fpm_pid }}
{% endif %}

; Error log file
; If it's set to "syslog", log is sent to syslogd instead of being written
; in a local file.
; Note: the default prefix is /var
; Default Value: log/php-fpm.log
; error_log = log/php-fpm.log
{% if php7_fpm_error_log is defined and php7_fpm_error_log != '' %}
error_log = {{ php7_fpm_error_log }}
{% endif %}

; syslog_facility is used to specify what type of program is logging the
; message. This lets syslogd specify that messages from different facilities
; will be handled differently.
; See syslog(3) for possible values (ex daemon equiv LOG_DAEMON)
; Default Value: daemon
; syslog.facility = daemon
{% if php7_fpm_syslog_facility is defined and php7_fpm_syslog_facility != '' %}
syslog.facility = {{ php7_fpm_syslog_facility }}
{% endif %}

; syslog_ident is prepended to every message. If you have multiple FPM
; instances running on the same server, you can change the default value
; which must suit common needs.
; Default Value: php-fpm
; syslog.ident = php-fpm
{% if php7_fpm_syslog_ident is defined and php7_fpm_syslog_ident != '' %}
syslog.ident = {{ php7_fpm_syslog_ident }}
{% endif %}

; Log level
; Possible Values: alert, error, warning, notice, debug
; Default Value: notice
; log_level = notice
{% if php7_fpm_log_level is defined and php7_fpm_log_level != '' %}
log_level = {{ php7_fpm_log_level }}
{% endif %}

; If this number of child processes exit with SIGSEGV or SIGBUS within the time
; interval set by emergency_restart_interval then FPM will restart. A value
; of '0' means 'Off'.
; Default Value: 0
; emergency_restart_threshold = 3
{% if php7_fpm_emergency_restart_threshold is defined and php7_fpm_emergency_restart_threshold != '' %}
emergency_restart_threshold = {{ php7_fpm_emergency_restart_threshold }}
{% endif %}

; Interval of time used by emergency_restart_interval to determine when
; a graceful restart will be initiated.  This can be useful to work around
; accidental corruptions in an accelerator's shared memory.
; Available Units: s(econds), m(inutes), h(ours), or d(ays)
; Default Unit: seconds
; Default Value: 0
; emergency_restart_interval = 0
{% if php7_fpm_emergency_restart_interval is defined and php7_fpm_emergency_restart_interval != '' %}
emergency_restart_interval = {{ php7_fpm_emergency_restart_interval }}
{% endif %}

; Time limit for child processes to wait for a reaction on signals from master.
; Available units: s(econds), m(inutes), h(ours), or d(ays)
; Default Unit: seconds
; Default Value: 0
; process_control_timeout = 5s
{% if php7_fpm_process_control_timeout is defined and php7_fpm_process_control_timeout != '' %}
process_control_timeout = {{ php7_fpm_process_control_timeout }}
{% endif %}

; The maximum number of processes FPM will fork. This has been design to control
; the global number of processes when using dynamic PM within a lot of pools.
; Use it with caution.
; Note: A value of 0 indicates no limit
; Default Value: 0
; process.max = 128
{% if php7_fpm_process_max is defined and php7_fpm_process_max != '' %}
process.max = {{ php7_fpm_process_max }}
{% endif %}

; Specify the nice(2) priority to apply to the master process (only if set)
; The value can vary from -19 (highest priority) to 20 (lower priority)
; Note: - It will only work if the FPM master process is launched as root
;       - The pool process will inherit the master process priority
;         unless it specified otherwise
; Default Value: no set
; process.priority = -19
{% if php7_fpm_process_priority is defined and php7_fpm_process_priority != '' %}
process.priority = {{ php7_fpm_process_priority }}
{% endif %}

; Send FPM to background. Set to 'no' to keep FPM in foreground for debugging.
; Default Value: yes
; daemonize = yes
{% if php7_fpm_daemonize is defined and php7_fpm_daemonize != '' %}
daemonize = {{ php7_fpm_daemonize }}
{% endif %}

; Set open file descriptor rlimit for the master process.
; Default Value: system defined value
; rlimit_files = 1024
{% if php7_fpm_rlimit_files is defined and php7_fpm_rlimit_files != '' %}
rlimit_files = {{ php7_fpm_rlimit_files }}
{% endif %}

; Set max core size rlimit for the master process.
; Possible Values: 'unlimited' or an integer greater or equal to 0
; Default Value: system defined value
; rlimit_core = 0
{% if php7_fpm_rlimit_core is defined and php7_fpm_rlimit_core != '' %}
rlimit_core = {{ php7_fpm_rlimit_core }}
{% endif %}

; Specify the event mechanism FPM will use. The following is available:
; - select     (any POSIX os)
; - poll       (any POSIX os)
; - epoll      (linux >= 2.5.44)
; - kqueue     (FreeBSD >= 4.1, OpenBSD >= 2.9, NetBSD >= 2.0)
; - /dev/poll  (Solaris >= 7)
; - port       (Solaris >= 10)
; Default Value: not set (auto detection)
; events.mechanism = epoll
{% if php7_fpm_events_mechanism is defined and php7_fpm_events_mechanism != '' %}
events.mechanism = {{ php7_fpm_events_mechanism }}
{% endif %}

; When FPM is build with systemd integration, specify the interval,
; in second, between health report notification to systemd.
; Set to 0 to disable.
; Available Units: s(econds), m(inutes), h(ours)
; Default Unit: seconds
; Default value: 10
; systemd_interval = 10
{% if php7_fpm_systemd_interval is defined and php7_fpm_systemd_interval != '' %}
systemd_interval = {{ php7_fpm_systemd_interval }}
{% endif %}

;;;;;;;;;;;;;;;;;;;;
; Pool Definitions ;
;;;;;;;;;;;;;;;;;;;;

; Multiple pools of child processes may be started with different listening
; ports and different management options.  The name of the pool will be
; used in logs and stats. There is no limitation on the number of pools which
; FPM can handle. Your system will tell you anyway :)

; To configure the pools it is recommended to have one .conf file per
; pool in the following directory:
; include=/etc/php/{{ php7_fpm_version }}/fpm/pool.d/*.conf
{% if php7_fpm_include is defined and php7_fpm_include is iterable %}
{% for include_file in php7_fpm_include %}
include={{ include_file }}
{% endfor %}
{% else %}
include={{ php7_fpm_pool_dir }}/*.conf
{% endif %}
